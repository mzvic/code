// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2eproto;
namespace core {
class Arr;
struct ArrDefaultTypeInternal;
extern ArrDefaultTypeInternal _Arr_default_instance_;
class Bundle;
struct BundleDefaultTypeInternal;
extern BundleDefaultTypeInternal _Bundle_default_instance_;
class Num;
struct NumDefaultTypeInternal;
extern NumDefaultTypeInternal _Num_default_instance_;
class Str;
struct StrDefaultTypeInternal;
extern StrDefaultTypeInternal _Str_default_instance_;
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> ::core::Arr* Arena::CreateMaybeMessage<::core::Arr>(Arena*);
template<> ::core::Bundle* Arena::CreateMaybeMessage<::core::Bundle>(Arena*);
template<> ::core::Num* Arena::CreateMaybeMessage<::core::Num>(Arena*);
template<> ::core::Str* Arena::CreateMaybeMessage<::core::Str>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace core {

enum Type : int {
  TYPE_UNSPECIFIED = 0,
  TYPE_VOLTAGE_A = 1,
  TYPE_CURRENT_A = 2,
  TYPE_HARMONICS_A = 3,
  TYPE_GPS_LAT = 4,
  TYPE_GPS_LON = 5,
  TYPE_GPS_ALT = 6,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_UNSPECIFIED;
constexpr Type Type_MAX = TYPE_GPS_ALT;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Bundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.Bundle) */ {
 public:
  inline Bundle() : Bundle(nullptr) {}
  ~Bundle() override;
  explicit PROTOBUF_CONSTEXPR Bundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bundle(const Bundle& from);
  Bundle(Bundle&& from) noexcept
    : Bundle() {
    *this = ::std::move(from);
  }

  inline Bundle& operator=(const Bundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bundle& operator=(Bundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bundle* internal_default_instance() {
    return reinterpret_cast<const Bundle*>(
               &_Bundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bundle& a, Bundle& b) {
    a.Swap(&b);
  }
  inline void Swap(Bundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bundle& from) {
    Bundle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Bundle";
  }
  protected:
  explicit Bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApdFieldNumber = 2,
    kApdtimeFieldNumber = 3,
    kPaFieldNumber = 4,
    kFftFieldNumber = 5,
    kFreqFieldNumber = 6,
    kTimestampFieldNumber = 1,
  };
  // repeated int32 apd = 2;
  int apd_size() const;
  private:
  int _internal_apd_size() const;
  public:
  void clear_apd();
  private:
  int32_t _internal_apd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_apd() const;
  void _internal_add_apd(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_apd();
  public:
  int32_t apd(int index) const;
  void set_apd(int index, int32_t value);
  void add_apd(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      apd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_apd();

  // repeated double apdtime = 3;
  int apdtime_size() const;
  private:
  int _internal_apdtime_size() const;
  public:
  void clear_apdtime();
  private:
  double _internal_apdtime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_apdtime() const;
  void _internal_add_apdtime(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_apdtime();
  public:
  double apdtime(int index) const;
  void set_apdtime(int index, double value);
  void add_apdtime(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      apdtime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_apdtime();

  // repeated int32 pa = 4;
  int pa_size() const;
  private:
  int _internal_pa_size() const;
  public:
  void clear_pa();
  private:
  int32_t _internal_pa(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pa() const;
  void _internal_add_pa(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pa();
  public:
  int32_t pa(int index) const;
  void set_pa(int index, int32_t value);
  void add_pa(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pa() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pa();

  // repeated double fft = 5;
  int fft_size() const;
  private:
  int _internal_fft_size() const;
  public:
  void clear_fft();
  private:
  double _internal_fft(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_fft() const;
  void _internal_add_fft(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_fft();
  public:
  double fft(int index) const;
  void set_fft(int index, double value);
  void add_fft(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      fft() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_fft();

  // repeated double freq = 6;
  int freq_size() const;
  private:
  int _internal_freq_size() const;
  public:
  void clear_freq();
  private:
  double _internal_freq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_freq() const;
  void _internal_add_freq(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_freq();
  public:
  double freq(int index) const;
  void set_freq(int index, double value);
  void add_freq(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      freq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_freq();

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:core.Bundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > apd_;
    mutable std::atomic<int> _apd_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > apdtime_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pa_;
    mutable std::atomic<int> _pa_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > fft_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > freq_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Num final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.Num) */ {
 public:
  inline Num() : Num(nullptr) {}
  ~Num() override;
  explicit PROTOBUF_CONSTEXPR Num(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Num(const Num& from);
  Num(Num&& from) noexcept
    : Num() {
    *this = ::std::move(from);
  }

  inline Num& operator=(const Num& from) {
    CopyFrom(from);
    return *this;
  }
  inline Num& operator=(Num&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Num& default_instance() {
    return *internal_default_instance();
  }
  static inline const Num* internal_default_instance() {
    return reinterpret_cast<const Num*>(
               &_Num_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Num& a, Num& b) {
    a.Swap(&b);
  }
  inline void Swap(Num* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Num* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Num* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Num>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Num& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Num& from) {
    Num::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Num* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Num";
  }
  protected:
  explicit Num(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // .core.Type type = 1;
  void clear_type();
  ::core::Type type() const;
  void set_type(::core::Type value);
  private:
  ::core::Type _internal_type() const;
  void _internal_set_type(::core::Type value);
  public:

  // @@protoc_insertion_point(class_scope:core.Num)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Arr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.Arr) */ {
 public:
  inline Arr() : Arr(nullptr) {}
  ~Arr() override;
  explicit PROTOBUF_CONSTEXPR Arr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Arr(const Arr& from);
  Arr(Arr&& from) noexcept
    : Arr() {
    *this = ::std::move(from);
  }

  inline Arr& operator=(const Arr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Arr& operator=(Arr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Arr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Arr* internal_default_instance() {
    return reinterpret_cast<const Arr*>(
               &_Arr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Arr& a, Arr& b) {
    a.Swap(&b);
  }
  inline void Swap(Arr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Arr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Arr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Arr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Arr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Arr& from) {
    Arr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Arr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Arr";
  }
  protected:
  explicit Arr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated double value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // .core.Type type = 1;
  void clear_type();
  ::core::Type type() const;
  void set_type(::core::Type value);
  private:
  ::core::Type _internal_type() const;
  void _internal_set_type(::core::Type value);
  public:

  // @@protoc_insertion_point(class_scope:core.Arr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Str final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.Str) */ {
 public:
  inline Str() : Str(nullptr) {}
  ~Str() override;
  explicit PROTOBUF_CONSTEXPR Str(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Str(const Str& from);
  Str(Str&& from) noexcept
    : Str() {
    *this = ::std::move(from);
  }

  inline Str& operator=(const Str& from) {
    CopyFrom(from);
    return *this;
  }
  inline Str& operator=(Str&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Str& default_instance() {
    return *internal_default_instance();
  }
  static inline const Str* internal_default_instance() {
    return reinterpret_cast<const Str*>(
               &_Str_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Str& a, Str& b) {
    a.Swap(&b);
  }
  inline void Swap(Str* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Str* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Str* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Str>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Str& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Str& from) {
    Str::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Str* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.Str";
  }
  protected:
  explicit Str(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .core.Type type = 1;
  void clear_type();
  ::core::Type type() const;
  void set_type(::core::Type value);
  private:
  ::core::Type _internal_type() const;
  void _internal_set_type(::core::Type value);
  public:

  // @@protoc_insertion_point(class_scope:core.Str)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bundle

// .google.protobuf.Timestamp timestamp = 1;
inline bool Bundle::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool Bundle::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bundle::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Bundle::timestamp() const {
  // @@protoc_insertion_point(field_get:core.Bundle.timestamp)
  return _internal_timestamp();
}
inline void Bundle::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core.Bundle.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bundle::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bundle::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:core.Bundle.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bundle::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Bundle::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:core.Bundle.timestamp)
  return _msg;
}
inline void Bundle::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:core.Bundle.timestamp)
}

// repeated int32 apd = 2;
inline int Bundle::_internal_apd_size() const {
  return _impl_.apd_.size();
}
inline int Bundle::apd_size() const {
  return _internal_apd_size();
}
inline void Bundle::clear_apd() {
  _impl_.apd_.Clear();
}
inline int32_t Bundle::_internal_apd(int index) const {
  return _impl_.apd_.Get(index);
}
inline int32_t Bundle::apd(int index) const {
  // @@protoc_insertion_point(field_get:core.Bundle.apd)
  return _internal_apd(index);
}
inline void Bundle::set_apd(int index, int32_t value) {
  _impl_.apd_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Bundle.apd)
}
inline void Bundle::_internal_add_apd(int32_t value) {
  _impl_.apd_.Add(value);
}
inline void Bundle::add_apd(int32_t value) {
  _internal_add_apd(value);
  // @@protoc_insertion_point(field_add:core.Bundle.apd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bundle::_internal_apd() const {
  return _impl_.apd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bundle::apd() const {
  // @@protoc_insertion_point(field_list:core.Bundle.apd)
  return _internal_apd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bundle::_internal_mutable_apd() {
  return &_impl_.apd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bundle::mutable_apd() {
  // @@protoc_insertion_point(field_mutable_list:core.Bundle.apd)
  return _internal_mutable_apd();
}

// repeated double apdtime = 3;
inline int Bundle::_internal_apdtime_size() const {
  return _impl_.apdtime_.size();
}
inline int Bundle::apdtime_size() const {
  return _internal_apdtime_size();
}
inline void Bundle::clear_apdtime() {
  _impl_.apdtime_.Clear();
}
inline double Bundle::_internal_apdtime(int index) const {
  return _impl_.apdtime_.Get(index);
}
inline double Bundle::apdtime(int index) const {
  // @@protoc_insertion_point(field_get:core.Bundle.apdtime)
  return _internal_apdtime(index);
}
inline void Bundle::set_apdtime(int index, double value) {
  _impl_.apdtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Bundle.apdtime)
}
inline void Bundle::_internal_add_apdtime(double value) {
  _impl_.apdtime_.Add(value);
}
inline void Bundle::add_apdtime(double value) {
  _internal_add_apdtime(value);
  // @@protoc_insertion_point(field_add:core.Bundle.apdtime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::_internal_apdtime() const {
  return _impl_.apdtime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::apdtime() const {
  // @@protoc_insertion_point(field_list:core.Bundle.apdtime)
  return _internal_apdtime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::_internal_mutable_apdtime() {
  return &_impl_.apdtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::mutable_apdtime() {
  // @@protoc_insertion_point(field_mutable_list:core.Bundle.apdtime)
  return _internal_mutable_apdtime();
}

// repeated int32 pa = 4;
inline int Bundle::_internal_pa_size() const {
  return _impl_.pa_.size();
}
inline int Bundle::pa_size() const {
  return _internal_pa_size();
}
inline void Bundle::clear_pa() {
  _impl_.pa_.Clear();
}
inline int32_t Bundle::_internal_pa(int index) const {
  return _impl_.pa_.Get(index);
}
inline int32_t Bundle::pa(int index) const {
  // @@protoc_insertion_point(field_get:core.Bundle.pa)
  return _internal_pa(index);
}
inline void Bundle::set_pa(int index, int32_t value) {
  _impl_.pa_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Bundle.pa)
}
inline void Bundle::_internal_add_pa(int32_t value) {
  _impl_.pa_.Add(value);
}
inline void Bundle::add_pa(int32_t value) {
  _internal_add_pa(value);
  // @@protoc_insertion_point(field_add:core.Bundle.pa)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bundle::_internal_pa() const {
  return _impl_.pa_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bundle::pa() const {
  // @@protoc_insertion_point(field_list:core.Bundle.pa)
  return _internal_pa();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bundle::_internal_mutable_pa() {
  return &_impl_.pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bundle::mutable_pa() {
  // @@protoc_insertion_point(field_mutable_list:core.Bundle.pa)
  return _internal_mutable_pa();
}

// repeated double fft = 5;
inline int Bundle::_internal_fft_size() const {
  return _impl_.fft_.size();
}
inline int Bundle::fft_size() const {
  return _internal_fft_size();
}
inline void Bundle::clear_fft() {
  _impl_.fft_.Clear();
}
inline double Bundle::_internal_fft(int index) const {
  return _impl_.fft_.Get(index);
}
inline double Bundle::fft(int index) const {
  // @@protoc_insertion_point(field_get:core.Bundle.fft)
  return _internal_fft(index);
}
inline void Bundle::set_fft(int index, double value) {
  _impl_.fft_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Bundle.fft)
}
inline void Bundle::_internal_add_fft(double value) {
  _impl_.fft_.Add(value);
}
inline void Bundle::add_fft(double value) {
  _internal_add_fft(value);
  // @@protoc_insertion_point(field_add:core.Bundle.fft)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::_internal_fft() const {
  return _impl_.fft_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::fft() const {
  // @@protoc_insertion_point(field_list:core.Bundle.fft)
  return _internal_fft();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::_internal_mutable_fft() {
  return &_impl_.fft_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::mutable_fft() {
  // @@protoc_insertion_point(field_mutable_list:core.Bundle.fft)
  return _internal_mutable_fft();
}

// repeated double freq = 6;
inline int Bundle::_internal_freq_size() const {
  return _impl_.freq_.size();
}
inline int Bundle::freq_size() const {
  return _internal_freq_size();
}
inline void Bundle::clear_freq() {
  _impl_.freq_.Clear();
}
inline double Bundle::_internal_freq(int index) const {
  return _impl_.freq_.Get(index);
}
inline double Bundle::freq(int index) const {
  // @@protoc_insertion_point(field_get:core.Bundle.freq)
  return _internal_freq(index);
}
inline void Bundle::set_freq(int index, double value) {
  _impl_.freq_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Bundle.freq)
}
inline void Bundle::_internal_add_freq(double value) {
  _impl_.freq_.Add(value);
}
inline void Bundle::add_freq(double value) {
  _internal_add_freq(value);
  // @@protoc_insertion_point(field_add:core.Bundle.freq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::_internal_freq() const {
  return _impl_.freq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Bundle::freq() const {
  // @@protoc_insertion_point(field_list:core.Bundle.freq)
  return _internal_freq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::_internal_mutable_freq() {
  return &_impl_.freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Bundle::mutable_freq() {
  // @@protoc_insertion_point(field_mutable_list:core.Bundle.freq)
  return _internal_mutable_freq();
}

// -------------------------------------------------------------------

// Num

// .core.Type type = 1;
inline void Num::clear_type() {
  _impl_.type_ = 0;
}
inline ::core::Type Num::_internal_type() const {
  return static_cast< ::core::Type >(_impl_.type_);
}
inline ::core::Type Num::type() const {
  // @@protoc_insertion_point(field_get:core.Num.type)
  return _internal_type();
}
inline void Num::_internal_set_type(::core::Type value) {
  
  _impl_.type_ = value;
}
inline void Num::set_type(::core::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:core.Num.type)
}

// double value = 2;
inline void Num::clear_value() {
  _impl_.value_ = 0;
}
inline double Num::_internal_value() const {
  return _impl_.value_;
}
inline double Num::value() const {
  // @@protoc_insertion_point(field_get:core.Num.value)
  return _internal_value();
}
inline void Num::_internal_set_value(double value) {
  
  _impl_.value_ = value;
}
inline void Num::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:core.Num.value)
}

// -------------------------------------------------------------------

// Arr

// .core.Type type = 1;
inline void Arr::clear_type() {
  _impl_.type_ = 0;
}
inline ::core::Type Arr::_internal_type() const {
  return static_cast< ::core::Type >(_impl_.type_);
}
inline ::core::Type Arr::type() const {
  // @@protoc_insertion_point(field_get:core.Arr.type)
  return _internal_type();
}
inline void Arr::_internal_set_type(::core::Type value) {
  
  _impl_.type_ = value;
}
inline void Arr::set_type(::core::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:core.Arr.type)
}

// repeated double value = 2;
inline int Arr::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int Arr::value_size() const {
  return _internal_value_size();
}
inline void Arr::clear_value() {
  _impl_.value_.Clear();
}
inline double Arr::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline double Arr::value(int index) const {
  // @@protoc_insertion_point(field_get:core.Arr.value)
  return _internal_value(index);
}
inline void Arr::set_value(int index, double value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.Arr.value)
}
inline void Arr::_internal_add_value(double value) {
  _impl_.value_.Add(value);
}
inline void Arr::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:core.Arr.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Arr::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Arr::value() const {
  // @@protoc_insertion_point(field_list:core.Arr.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Arr::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Arr::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:core.Arr.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Str

// .core.Type type = 1;
inline void Str::clear_type() {
  _impl_.type_ = 0;
}
inline ::core::Type Str::_internal_type() const {
  return static_cast< ::core::Type >(_impl_.type_);
}
inline ::core::Type Str::type() const {
  // @@protoc_insertion_point(field_get:core.Str.type)
  return _internal_type();
}
inline void Str::_internal_set_type(::core::Type value) {
  
  _impl_.type_ = value;
}
inline void Str::set_type(::core::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:core.Str.type)
}

// string value = 2;
inline void Str::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Str::value() const {
  // @@protoc_insertion_point(field_get:core.Str.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Str::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:core.Str.value)
}
inline std::string* Str::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:core.Str.value)
  return _s;
}
inline const std::string& Str::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Str::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Str::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Str::release_value() {
  // @@protoc_insertion_point(field_release:core.Str.value)
  return _impl_.value_.Release();
}
inline void Str::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.Str.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::core::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::core::Type>() {
  return ::core::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2eproto
