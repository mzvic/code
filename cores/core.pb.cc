// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace core {
PROTOBUF_CONSTEXPR Bundle::Bundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apd_)*/{}
  , /*decltype(_impl_._apd_cached_byte_size_)*/{0}
  , /*decltype(_impl_.apdtime_)*/{}
  , /*decltype(_impl_.pa_)*/{}
  , /*decltype(_impl_._pa_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fft_)*/{}
  , /*decltype(_impl_.freq_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BundleDefaultTypeInternal() {}
  union {
    Bundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BundleDefaultTypeInternal _Bundle_default_instance_;
PROTOBUF_CONSTEXPR Num::Num(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumDefaultTypeInternal() {}
  union {
    Num _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumDefaultTypeInternal _Num_default_instance_;
PROTOBUF_CONSTEXPR Arr::Arr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ArrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrDefaultTypeInternal() {}
  union {
    Arr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrDefaultTypeInternal _Arr_default_instance_;
PROTOBUF_CONSTEXPR Str::Str(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrDefaultTypeInternal() {}
  union {
    Str _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrDefaultTypeInternal _Str_default_instance_;
}  // namespace core
static ::_pb::Metadata file_level_metadata_core_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_core_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_core_2eproto = nullptr;

const uint32_t TableStruct_core_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.apd_),
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.apdtime_),
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.pa_),
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.fft_),
  PROTOBUF_FIELD_OFFSET(::core::Bundle, _impl_.freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::Num, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::Num, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::core::Num, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::Arr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::Arr, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::core::Arr, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::core::Str, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::core::Str, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::core::Str, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::core::Bundle)},
  { 12, -1, -1, sizeof(::core::Num)},
  { 20, -1, -1, sizeof(::core::Arr)},
  { 28, -1, -1, sizeof(::core::Str)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::core::_Bundle_default_instance_._instance,
  &::core::_Num_default_instance_._instance,
  &::core::_Arr_default_instance_._instance,
  &::core::_Str_default_instance_._instance,
};

const char descriptor_table_protodef_core_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncore.proto\022\004core\032\033google/protobuf/empt"
  "y.proto\032\037google/protobuf/timestamp.proto"
  "\"|\n\006Bundle\022-\n\ttimestamp\030\001 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\013\n\003apd\030\002 \003(\005\022\017\n\007apdtim"
  "e\030\003 \003(\001\022\n\n\002pa\030\004 \003(\005\022\013\n\003fft\030\005 \003(\001\022\014\n\004freq"
  "\030\006 \003(\001\".\n\003Num\022\030\n\004type\030\001 \001(\0162\n.core.Type\022"
  "\r\n\005value\030\002 \001(\001\".\n\003Arr\022\030\n\004type\030\001 \001(\0162\n.co"
  "re.Type\022\r\n\005value\030\002 \003(\001\".\n\003Str\022\030\n\004type\030\001 "
  "\001(\0162\n.core.Type\022\r\n\005value\030\002 \001(\t*\220\001\n\004Type\022"
  "\024\n\020TYPE_UNSPECIFIED\020\000\022\022\n\016TYPE_VOLTAGE_A\020"
  "\001\022\022\n\016TYPE_CURRENT_A\020\002\022\024\n\020TYPE_HARMONICS_"
  "A\020\003\022\020\n\014TYPE_GPS_LAT\020\004\022\020\n\014TYPE_GPS_LON\020\005\022"
  "\020\n\014TYPE_GPS_ALT\020\0062p\n\006Broker\0221\n\007Publish\022\014"
  ".core.Bundle\032\026.google.protobuf.Empty(\001\0223"
  "\n\tSubscribe\022\026.google.protobuf.Empty\032\014.co"
  "re.Bundle0\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_core_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_core_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_core_2eproto = {
    false, false, 619, descriptor_table_protodef_core_2eproto,
    "core.proto",
    &descriptor_table_core_2eproto_once, descriptor_table_core_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_core_2eproto::offsets,
    file_level_metadata_core_2eproto, file_level_enum_descriptors_core_2eproto,
    file_level_service_descriptors_core_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_core_2eproto_getter() {
  return &descriptor_table_core_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_core_2eproto(&descriptor_table_core_2eproto);
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2eproto);
  return file_level_enum_descriptors_core_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Bundle::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Bundle* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Bundle::_Internal::timestamp(const Bundle* msg) {
  return *msg->_impl_.timestamp_;
}
void Bundle::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
Bundle::Bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:core.Bundle)
}
Bundle::Bundle(const Bundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apd_){from._impl_.apd_}
    , /*decltype(_impl_._apd_cached_byte_size_)*/{0}
    , decltype(_impl_.apdtime_){from._impl_.apdtime_}
    , decltype(_impl_.pa_){from._impl_.pa_}
    , /*decltype(_impl_._pa_cached_byte_size_)*/{0}
    , decltype(_impl_.fft_){from._impl_.fft_}
    , decltype(_impl_.freq_){from._impl_.freq_}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:core.Bundle)
}

inline void Bundle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apd_){arena}
    , /*decltype(_impl_._apd_cached_byte_size_)*/{0}
    , decltype(_impl_.apdtime_){arena}
    , decltype(_impl_.pa_){arena}
    , /*decltype(_impl_._pa_cached_byte_size_)*/{0}
    , decltype(_impl_.fft_){arena}
    , decltype(_impl_.freq_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Bundle::~Bundle() {
  // @@protoc_insertion_point(destructor:core.Bundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apd_.~RepeatedField();
  _impl_.apdtime_.~RepeatedField();
  _impl_.pa_.~RepeatedField();
  _impl_.fft_.~RepeatedField();
  _impl_.freq_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void Bundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bundle::Clear() {
// @@protoc_insertion_point(message_clear_start:core.Bundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apd_.Clear();
  _impl_.apdtime_.Clear();
  _impl_.pa_.Clear();
  _impl_.fft_.Clear();
  _impl_.freq_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 apd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_apd(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_apd(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double apdtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_apdtime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_apdtime(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pa(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_pa(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double fft = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_fft(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_fft(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double freq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_freq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_freq(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.Bundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated int32 apd = 2;
  {
    int byte_size = _impl_._apd_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_apd(), byte_size, target);
    }
  }

  // repeated double apdtime = 3;
  if (this->_internal_apdtime_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_apdtime(), target);
  }

  // repeated int32 pa = 4;
  {
    int byte_size = _impl_._pa_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_pa(), byte_size, target);
    }
  }

  // repeated double fft = 5;
  if (this->_internal_fft_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_fft(), target);
  }

  // repeated double freq = 6;
  if (this->_internal_freq_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.Bundle)
  return target;
}

size_t Bundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.Bundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 apd = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.apd_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._apd_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double apdtime = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_apdtime_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 pa = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pa_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pa_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double fft = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fft_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double freq = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_freq_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bundle::GetClassData() const { return &_class_data_; }


void Bundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bundle*>(&to_msg);
  auto& from = static_cast<const Bundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:core.Bundle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apd_.MergeFrom(from._impl_.apd_);
  _this->_impl_.apdtime_.MergeFrom(from._impl_.apdtime_);
  _this->_impl_.pa_.MergeFrom(from._impl_.pa_);
  _this->_impl_.fft_.MergeFrom(from._impl_.fft_);
  _this->_impl_.freq_.MergeFrom(from._impl_.freq_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bundle::CopyFrom(const Bundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.Bundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bundle::IsInitialized() const {
  return true;
}

void Bundle::InternalSwap(Bundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apd_.InternalSwap(&other->_impl_.apd_);
  _impl_.apdtime_.InternalSwap(&other->_impl_.apdtime_);
  _impl_.pa_.InternalSwap(&other->_impl_.pa_);
  _impl_.fft_.InternalSwap(&other->_impl_.fft_);
  _impl_.freq_.InternalSwap(&other->_impl_.freq_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[0]);
}

// ===================================================================

class Num::_Internal {
 public:
};

Num::Num(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:core.Num)
}
Num::Num(const Num& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Num* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:core.Num)
}

inline void Num::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Num::~Num() {
  // @@protoc_insertion_point(destructor:core.Num)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Num::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Num::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Num::Clear() {
// @@protoc_insertion_point(message_clear_start:core.Num)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Num::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::core::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Num::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.Num)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.Num)
  return target;
}

size_t Num::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.Num)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Num::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Num::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Num::GetClassData() const { return &_class_data_; }


void Num::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Num*>(&to_msg);
  auto& from = static_cast<const Num&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:core.Num)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Num::CopyFrom(const Num& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.Num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Num::IsInitialized() const {
  return true;
}

void Num::InternalSwap(Num* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Num, _impl_.type_)
      + sizeof(Num::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Num, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Num::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[1]);
}

// ===================================================================

class Arr::_Internal {
 public:
};

Arr::Arr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:core.Arr)
}
Arr::Arr(const Arr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Arr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:core.Arr)
}

inline void Arr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Arr::~Arr() {
  // @@protoc_insertion_point(destructor:core.Arr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Arr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void Arr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Arr::Clear() {
// @@protoc_insertion_point(message_clear_start:core.Arr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Arr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::core::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Arr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.Arr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated double value = 2;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.Arr)
  return target;
}

size_t Arr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.Arr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Arr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Arr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Arr::GetClassData() const { return &_class_data_; }


void Arr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Arr*>(&to_msg);
  auto& from = static_cast<const Arr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:core.Arr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Arr::CopyFrom(const Arr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.Arr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arr::IsInitialized() const {
  return true;
}

void Arr::InternalSwap(Arr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Arr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[2]);
}

// ===================================================================

class Str::_Internal {
 public:
};

Str::Str(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:core.Str)
}
Str::Str(const Str& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Str* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:core.Str)
}

inline void Str::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Str::~Str() {
  // @@protoc_insertion_point(destructor:core.Str)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Str::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Str::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Str::Clear() {
// @@protoc_insertion_point(message_clear_start:core.Str)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Str::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .core.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::core::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "core.Str.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Str::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.Str)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "core.Str.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.Str)
  return target;
}

size_t Str::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.Str)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .core.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Str::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Str::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Str::GetClassData() const { return &_class_data_; }


void Str::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Str*>(&to_msg);
  auto& from = static_cast<const Str&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:core.Str)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Str::CopyFrom(const Str& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Str::IsInitialized() const {
  return true;
}

void Str::InternalSwap(Str* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Str::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2eproto_getter, &descriptor_table_core_2eproto_once,
      file_level_metadata_core_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::Bundle*
Arena::CreateMaybeMessage< ::core::Bundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::Bundle >(arena);
}
template<> PROTOBUF_NOINLINE ::core::Num*
Arena::CreateMaybeMessage< ::core::Num >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::Num >(arena);
}
template<> PROTOBUF_NOINLINE ::core::Arr*
Arena::CreateMaybeMessage< ::core::Arr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::Arr >(arena);
}
template<> PROTOBUF_NOINLINE ::core::Str*
Arena::CreateMaybeMessage< ::core::Str >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::Str >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
