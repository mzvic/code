// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto

#include "core.pb.h"
#include "core.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core {

static const char* Broker_method_names[] = {
  "/core.Broker/Publish",
  "/core.Broker/Subscribe",
};

std::unique_ptr< Broker::Stub> Broker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Broker::Stub> stub(new Broker::Stub(channel, options));
  return stub;
}

Broker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Publish_(Broker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Subscribe_(Broker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::core::Bundle>* Broker::Stub::PublishRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::core::Bundle>::Create(channel_.get(), rpcmethod_Publish_, context, response);
}

void Broker::Stub::async::Publish(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::core::Bundle>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::core::Bundle>::Create(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::core::Bundle>* Broker::Stub::AsyncPublishRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::core::Bundle>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::core::Bundle>* Broker::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::core::Bundle>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, false, nullptr);
}

::grpc::ClientReader< ::core::Bundle>* Broker::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::core::Bundle>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void Broker::Stub::async::Subscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::core::Bundle>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::core::Bundle>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::core::Bundle>* Broker::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::core::Bundle>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::core::Bundle>* Broker::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::core::Bundle>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

Broker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Broker::Service, ::core::Bundle, ::google::protobuf::Empty>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::core::Bundle>* reader,
             ::google::protobuf::Empty* resp) {
               return service->Publish(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Broker_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Broker::Service, ::google::protobuf::Empty, ::core::Bundle>(
          [](Broker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::core::Bundle>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

Broker::Service::~Service() {
}

::grpc::Status Broker::Service::Publish(::grpc::ServerContext* context, ::grpc::ServerReader< ::core::Bundle>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Broker::Service::Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::core::Bundle>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core

